/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * NLW Connect
 * OpenAPI spec version: 1.0.0
 */
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
export type SubscribeToEventBody = {
	name: string;
	email: string;
	/** @nullable */
	referrerId?: string | null;
};

export type SubscribeToEvent201 = {
	subscriberId: string;
};

/**
 * @nullable
 */
export type AccessInviteLink302 =
	| (typeof AccessInviteLink302)[keyof typeof AccessInviteLink302]
	| null;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccessInviteLink302 = {
	null: "null",
} as const;

export type GetSubscriberInviteClicks200 = {
	count: number;
};

export type GetSubscriberInviteCount200 = {
	count: number;
};

export type GetSubscriberRankingPosition200 = {
	/** @nullable */
	position: number | null;
};

export type GetRanking200RankingItem = {
	id: string;
	name: string;
	score: number;
};

export type GetRanking200 = {
	ranking: GetRanking200RankingItem[];
};

/**
 * @summary Subscribe someone to the event
 */
export const getSubscribeToEventUrl = () => {
	return `http://localhost:3333/subscriptions`;
};

export const subscribeToEvent = async (
	subscribeToEventBody: SubscribeToEventBody,
	options?: RequestInit,
): Promise<SubscribeToEvent201> => {
	const res = await fetch(getSubscribeToEventUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(subscribeToEventBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: SubscribeToEvent201 = body ? JSON.parse(body) : {};

	return data;
};

export const getSubscribeToEventMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof subscribeToEvent>>,
		TError,
		{ data: SubscribeToEventBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof subscribeToEvent>>,
	TError,
	{ data: SubscribeToEventBody },
	TContext
> => {
	const mutationKey = ["subscribeToEvent"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof subscribeToEvent>>,
		{ data: SubscribeToEventBody }
	> = (props) => {
		const { data } = props ?? {};

		return subscribeToEvent(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type SubscribeToEventMutationResult = NonNullable<
	Awaited<ReturnType<typeof subscribeToEvent>>
>;
export type SubscribeToEventMutationBody = SubscribeToEventBody;
export type SubscribeToEventMutationError = unknown;

/**
 * @summary Subscribe someone to the event
 */
export const useSubscribeToEvent = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof subscribeToEvent>>,
		TError,
		{ data: SubscribeToEventBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof subscribeToEvent>>,
	TError,
	{ data: SubscribeToEventBody },
	TContext
> => {
	const mutationOptions = getSubscribeToEventMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * @summary Access invite link and redirects user
 */
export const getAccessInviteLinkUrl = (subscriberId: string) => {
	return `http://localhost:3333/invites/${subscriberId}`;
};

export const accessInviteLink = async (
	subscriberId: string,
	options?: RequestInit,
): Promise<unknown> => {
	const res = await fetch(getAccessInviteLinkUrl(subscriberId), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: unknown = body ? JSON.parse(body) : {};

	return data;
};

export const getAccessInviteLinkQueryKey = (subscriberId: string) => {
	return [`http://localhost:3333/invites/${subscriberId}`] as const;
};

export const getAccessInviteLinkQueryOptions = <
	TData = Awaited<ReturnType<typeof accessInviteLink>>,
	TError = AccessInviteLink302,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof accessInviteLink>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getAccessInviteLinkQueryKey(subscriberId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof accessInviteLink>>
	> = ({ signal }) =>
		accessInviteLink(subscriberId, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!subscriberId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof accessInviteLink>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AccessInviteLinkQueryResult = NonNullable<
	Awaited<ReturnType<typeof accessInviteLink>>
>;
export type AccessInviteLinkQueryError = AccessInviteLink302;

export function useAccessInviteLink<
	TData = Awaited<ReturnType<typeof accessInviteLink>>,
	TError = AccessInviteLink302,
>(
	subscriberId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof accessInviteLink>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof accessInviteLink>>,
					TError,
					Awaited<ReturnType<typeof accessInviteLink>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAccessInviteLink<
	TData = Awaited<ReturnType<typeof accessInviteLink>>,
	TError = AccessInviteLink302,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof accessInviteLink>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof accessInviteLink>>,
					TError,
					Awaited<ReturnType<typeof accessInviteLink>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAccessInviteLink<
	TData = Awaited<ReturnType<typeof accessInviteLink>>,
	TError = AccessInviteLink302,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof accessInviteLink>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Access invite link and redirects user
 */

export function useAccessInviteLink<
	TData = Awaited<ReturnType<typeof accessInviteLink>>,
	TError = AccessInviteLink302,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof accessInviteLink>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getAccessInviteLinkQueryOptions(subscriberId, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get subscriber invite clicks count
 */
export const getGetSubscriberInviteClicksUrl = (subscriberId: string) => {
	return `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`;
};

export const getSubscriberInviteClicks = async (
	subscriberId: string,
	options?: RequestInit,
): Promise<GetSubscriberInviteClicks200> => {
	const res = await fetch(getGetSubscriberInviteClicksUrl(subscriberId), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: GetSubscriberInviteClicks200 = body ? JSON.parse(body) : {};

	return data;
};

export const getGetSubscriberInviteClicksQueryKey = (subscriberId: string) => {
	return [
		`http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`,
	] as const;
};

export const getGetSubscriberInviteClicksQueryOptions = <
	TData = Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getGetSubscriberInviteClicksQueryKey(subscriberId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getSubscriberInviteClicks>>
	> = ({ signal }) =>
		getSubscriberInviteClicks(subscriberId, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!subscriberId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubscriberInviteClicksQueryResult = NonNullable<
	Awaited<ReturnType<typeof getSubscriberInviteClicks>>
>;
export type GetSubscriberInviteClicksQueryError = unknown;

export function useGetSubscriberInviteClicks<
	TData = Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
	TError = unknown,
>(
	subscriberId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
					TError,
					Awaited<ReturnType<typeof getSubscriberInviteClicks>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriberInviteClicks<
	TData = Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
					TError,
					Awaited<ReturnType<typeof getSubscriberInviteClicks>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriberInviteClicks<
	TData = Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get subscriber invite clicks count
 */

export function useGetSubscriberInviteClicks<
	TData = Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteClicks>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetSubscriberInviteClicksQueryOptions(
		subscriberId,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get subscriber ranking invites count
 */
export const getGetSubscriberInviteCountUrl = (subscriberId: string) => {
	return `http://localhost:3333/subscribers/${subscriberId}/ranking/count`;
};

export const getSubscriberInviteCount = async (
	subscriberId: string,
	options?: RequestInit,
): Promise<GetSubscriberInviteCount200> => {
	const res = await fetch(getGetSubscriberInviteCountUrl(subscriberId), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: GetSubscriberInviteCount200 = body ? JSON.parse(body) : {};

	return data;
};

export const getGetSubscriberInviteCountQueryKey = (subscriberId: string) => {
	return [
		`http://localhost:3333/subscribers/${subscriberId}/ranking/count`,
	] as const;
};

export const getGetSubscriberInviteCountQueryOptions = <
	TData = Awaited<ReturnType<typeof getSubscriberInviteCount>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteCount>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetSubscriberInviteCountQueryKey(subscriberId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getSubscriberInviteCount>>
	> = ({ signal }) =>
		getSubscriberInviteCount(subscriberId, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!subscriberId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getSubscriberInviteCount>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubscriberInviteCountQueryResult = NonNullable<
	Awaited<ReturnType<typeof getSubscriberInviteCount>>
>;
export type GetSubscriberInviteCountQueryError = unknown;

export function useGetSubscriberInviteCount<
	TData = Awaited<ReturnType<typeof getSubscriberInviteCount>>,
	TError = unknown,
>(
	subscriberId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteCount>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSubscriberInviteCount>>,
					TError,
					Awaited<ReturnType<typeof getSubscriberInviteCount>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriberInviteCount<
	TData = Awaited<ReturnType<typeof getSubscriberInviteCount>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteCount>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSubscriberInviteCount>>,
					TError,
					Awaited<ReturnType<typeof getSubscriberInviteCount>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriberInviteCount<
	TData = Awaited<ReturnType<typeof getSubscriberInviteCount>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteCount>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get subscriber ranking invites count
 */

export function useGetSubscriberInviteCount<
	TData = Awaited<ReturnType<typeof getSubscriberInviteCount>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberInviteCount>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetSubscriberInviteCountQueryOptions(
		subscriberId,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get subscriber ranking position
 */
export const getGetSubscriberRankingPositionUrl = (subscriberId: string) => {
	return `http://localhost:3333/subscribers/${subscriberId}/ranking/position`;
};

export const getSubscriberRankingPosition = async (
	subscriberId: string,
	options?: RequestInit,
): Promise<GetSubscriberRankingPosition200> => {
	const res = await fetch(getGetSubscriberRankingPositionUrl(subscriberId), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: GetSubscriberRankingPosition200 = body ? JSON.parse(body) : {};

	return data;
};

export const getGetSubscriberRankingPositionQueryKey = (
	subscriberId: string,
) => {
	return [
		`http://localhost:3333/subscribers/${subscriberId}/ranking/position`,
	] as const;
};

export const getGetSubscriberRankingPositionQueryOptions = <
	TData = Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getGetSubscriberRankingPositionQueryKey(subscriberId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getSubscriberRankingPosition>>
	> = ({ signal }) =>
		getSubscriberRankingPosition(subscriberId, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!subscriberId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubscriberRankingPositionQueryResult = NonNullable<
	Awaited<ReturnType<typeof getSubscriberRankingPosition>>
>;
export type GetSubscriberRankingPositionQueryError = unknown;

export function useGetSubscriberRankingPosition<
	TData = Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
	TError = unknown,
>(
	subscriberId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
					TError,
					Awaited<ReturnType<typeof getSubscriberRankingPosition>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriberRankingPosition<
	TData = Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
					TError,
					Awaited<ReturnType<typeof getSubscriberRankingPosition>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriberRankingPosition<
	TData = Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get subscriber ranking position
 */

export function useGetSubscriberRankingPosition<
	TData = Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
	TError = unknown,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getSubscriberRankingPosition>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetSubscriberRankingPositionQueryOptions(
		subscriberId,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get ranking
 */
export const getGetRankingUrl = () => {
	return `http://localhost:3333/ranking`;
};

export const getRanking = async (
	options?: RequestInit,
): Promise<GetRanking200> => {
	const res = await fetch(getGetRankingUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: GetRanking200 = body ? JSON.parse(body) : {};

	return data;
};

export const getGetRankingQueryKey = () => {
	return [`http://localhost:3333/ranking`] as const;
};

export const getGetRankingQueryOptions = <
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetRankingQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getRanking>>> = ({
		signal,
	}) => getRanking({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getRanking>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRankingQueryResult = NonNullable<
	Awaited<ReturnType<typeof getRanking>>
>;
export type GetRankingQueryError = unknown;

export function useGetRanking<
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = unknown,
>(options: {
	query: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getRanking>>,
				TError,
				Awaited<ReturnType<typeof getRanking>>
			>,
			"initialData"
		>;
	fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRanking<
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getRanking>>,
				TError,
				Awaited<ReturnType<typeof getRanking>>
			>,
			"initialData"
		>;
	fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRanking<
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	>;
	fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get ranking
 */

export function useGetRanking<
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	>;
	fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetRankingQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
